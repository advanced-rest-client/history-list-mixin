{
  "schema_version": "1.0.0",
  "mixins": [
    {
      "description": "A mixin to be applied to a list that renders history requests.\nIt contains methods to query for history list and to search history.",
      "summary": "",
      "path": "history-list-mixin.js",
      "properties": [
        {
          "name": "requests",
          "type": "Array.<Object>",
          "description": "The list of request to render.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "querying",
          "type": "boolean | null | undefined",
          "description": "True when the element is querying the database for the data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "pageLimit",
          "type": "number | null | undefined",
          "description": "Single page query limit.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 8
            },
            "end": {
              "line": 50,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "150"
        },
        {
          "name": "_queryStartKey",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 8
            },
            "end": {
              "line": 51,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_querySkip",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 8
            },
            "end": {
              "line": 52,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "queryOptions",
          "type": "Object | null | undefined",
          "description": "Computed value.\nDatabase query options for pagination.\nUse `pageLimit` to set pagination limit.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 61,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "dataUnavailable",
          "type": "boolean | null | undefined",
          "description": "Computed value. True if query ended and there's no results.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "isSearch",
          "type": "boolean | null | undefined",
          "description": "When set this component is in search mode.\nThis means that the list won't be loaded automatically and\nsome operations not related to search are disabled.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 8
            },
            "end": {
              "line": 77,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "searchListEmpty",
          "type": "boolean | null | undefined",
          "description": "Computed value. True when the query has been performed and no items\nhas been returned. It is different from `listHidden` where less\nconditions has to be checked. It is set to true when it doesn't\nhave items, is not loading and is search.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "noAuto",
          "type": "boolean | null | undefined",
          "description": "When set it won't query for data automatically when attached to the DOM.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 4
            },
            "end": {
              "line": 111,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeQueryOptions",
          "description": "Computes pagination options.\nThis resets pagination status.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 141,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "limit",
              "type": "Number",
              "description": "Items per page limit."
            },
            {
              "name": "startKey",
              "type": "String",
              "description": "Query start key"
            },
            {
              "name": "skip",
              "type": "Number",
              "description": "Number of records to skip."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Pagination options for PouchDB."
          }
        },
        {
          "name": "_computeDataUnavailable",
          "description": "Computes value for the `dataUnavailable` proeprty",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 152,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasRequests",
              "type": "Boolean",
              "description": "[description]"
            },
            {
              "name": "loading",
              "type": "Booelan",
              "description": "[description]"
            },
            {
              "name": "isSearch",
              "type": "Boolean",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "_computeSearchListEmpty",
          "description": "Computes value for the `searchListEmpty` property",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 4
            },
            "end": {
              "line": 163,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hasRequests",
              "type": "Boolean",
              "description": "[description]"
            },
            {
              "name": "loading",
              "type": "Booelan",
              "description": "[description]"
            },
            {
              "name": "isSearch",
              "type": "Boolean",
              "description": "[description]"
            }
          ],
          "return": {
            "type": "Boolean"
          }
        },
        {
          "name": "refresh",
          "description": "Refreshes the data from the datastore.\nIt resets the query options, clears requests and makes a query to the datastore.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 4
            },
            "end": {
              "line": 172,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "reset",
          "description": "Resets the state of the variables.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 4
            },
            "end": {
              "line": 192,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataImportHandler",
          "description": "Handler for `data-imported` cutom event.\nRefreshes data state.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 4
            },
            "end": {
              "line": 199,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onDatabaseDestroy",
          "description": "Handler for the `datastore-destroyed` custom event.\nIf one of destroyed databases is history store then it refreshes the sate.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 205,
              "column": 4
            },
            "end": {
              "line": 219,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "CustomEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "loadNext",
          "description": "Loads next page of results. It runs the task in a debouncer set to\nnext render frame so it's safe to call it more than once at the time.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 236,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_appendItems",
          "description": "Appends array items to the `requests` property.\nIt should be used instead of direct manipulation of the `items` array.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 4
            },
            "end": {
              "line": 252,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requests",
              "type": "Array.<Object>",
              "description": "List of requests to appenmd"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_loadPage",
          "description": "Loads next page of results from the datastore.\nPagination used here has been described in PouchDB pagination strategies\ndocument.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 259,
              "column": 4
            },
            "end": {
              "line": 293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Promise"
          }
        },
        {
          "name": "_dispatchListEvent",
          "description": "Dispatches `request-list` custom event and returns the event.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 298,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "CustomEvent"
          }
        },
        {
          "name": "_handleError",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 315,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cause"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_processHistoryResults",
          "description": "Processes query results to generate view data model.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 4
            },
            "end": {
              "line": 334,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "res",
              "type": "Array",
              "description": "List of history requests retreived from the datastore."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Processed data requests."
          }
        },
        {
          "name": "_ensureTimestamps",
          "description": "Ensures that the history objects have the `updated` property\nrequired by further computations while processing results.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 353,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requests",
              "type": "Array.<Object>",
              "description": "List of history requests"
            }
          ],
          "return": {
            "type": "Array.<Object>",
            "desc": "The same array but all requests will have `updated`\nproperty."
          }
        },
        {
          "name": "_sortHistoryResults",
          "description": "Sorts the query results by `updated` property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 360,
              "column": 4
            },
            "end": {
              "line": 368,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "Object"
            },
            {
              "name": "b",
              "type": "Object"
            }
          ],
          "return": {
            "type": "Number"
          }
        },
        {
          "name": "_getTodayTimestamp",
          "description": "Creates a timestamp fot today, midnight",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 4
            },
            "end": {
              "line": 377,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Number"
          }
        },
        {
          "name": "_getYesterdayTimestamp",
          "description": "Computes yesterday's midninght based on today's mignight timestamp",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 383,
              "column": 4
            },
            "end": {
              "line": 385,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "todayTimestamp",
              "type": "Number",
              "description": "Timestamp of current daty at midnight"
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Timestamp 24 hours earlier."
          }
        },
        {
          "name": "_groupHistory",
          "description": "Creates headers for each day and group requests in each day group.\nThis is relevant for history type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 395,
              "column": 4
            },
            "end": {
              "line": 418,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "requests",
              "type": "Array.<Object>"
            },
            {
              "name": "today",
              "type": "Number",
              "description": "Timestamp of today"
            },
            {
              "name": "yesterday",
              "type": "Number",
              "description": "Timestamp of yesterday"
            }
          ],
          "return": {
            "type": "Array.<Object>"
          }
        },
        {
          "name": "_computeHistoryTime",
          "description": "Computes time information for a history item. This is later used to\npresent history list item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 428,
              "column": 4
            },
            "end": {
              "line": 448,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "date",
              "type": "Number",
              "description": "Timestamp of when the item was created / updated"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Various time formats:\n- formatted - Formatted date string\n- time - Parsed timestamp\n- timeLabel - secondary list item"
          }
        },
        {
          "name": "_historyTypeChanged",
          "description": "Handles request model change when the type is history.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 453,
              "column": 4
            },
            "end": {
              "line": 474,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "Changed request object."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeItem",
          "description": "Removes history item at position.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 479,
              "column": 4
            },
            "end": {
              "line": 489,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "index",
              "type": "Number",
              "description": "Item's index in requests array"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_insertItem",
          "description": "Adds a new history item to the list at a position where its `updated` or\n`created` time suggests.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 495,
              "column": 4
            },
            "end": {
              "line": 519,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "History model to add."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_historyInsertPosition",
          "description": "Determines a position of a history item to be inserted at.\nThe position is determined by `time` argument.\nIt always returns the position where the item to insert is newer than next item on the list.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 527,
              "column": 4
            },
            "end": {
              "line": 547,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "time",
              "type": "Number",
              "description": "Request's `updated` or `created` property,."
            }
          ],
          "return": {
            "type": "Number",
            "desc": "Position at which insert the request."
          }
        },
        {
          "name": "_appendHistoryTimeHeader",
          "description": "Appends time properties to a history item.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 554,
              "column": 4
            },
            "end": {
              "line": 570,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "History model"
            },
            {
              "name": "timeInfo",
              "type": "Object",
              "description": "Generated time info object."
            },
            {
              "name": "addHeader",
              "type": "Boolean",
              "description": "True to set header values."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_resetHistoryObject",
          "description": "Resets history object by removing items that has been added\nwhen processing response.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 577,
              "column": 4
            },
            "end": {
              "line": 584,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "request",
              "type": "Object",
              "description": "ARC request object"
            }
          ],
          "return": {
            "type": "Object"
          }
        },
        {
          "name": "query",
          "description": "Dispatches `request-query` custom event to `request-model`\nto perform a query.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 594,
              "column": 4
            },
            "end": {
              "line": 621,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "query",
              "type": "String",
              "description": "The query to performs. Pass empty stirng\n(or nothing) to reset query state."
            }
          ],
          "return": {
            "type": "Promise",
            "desc": "Resolved promise when the query ends."
          }
        },
        {
          "name": "_dispatchQueryEvent",
          "description": "Dispatches `request-query` custom event.\nThis event is handled by `request-mode` element to query the\ndatastore for user search term.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 629,
              "column": 4
            },
            "end": {
              "line": 641,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "q",
              "type": "String",
              "description": "Query passed to event detail."
            }
          ],
          "return": {
            "type": "CustomEvent"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 23,
          "column": 7
        },
        "end": {
          "line": 661,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "ArcComponents.HistoryListMixin",
      "attributes": [
        {
          "name": "requests",
          "description": "The list of request to render.",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 8
            },
            "end": {
              "line": 35,
              "column": 23
            }
          },
          "metadata": {},
          "type": "Array.<Object>"
        },
        {
          "name": "querying",
          "description": "True when the element is querying the database for the data.",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 8
            },
            "end": {
              "line": 43,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "page-limit",
          "description": "Single page query limit.",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 8
            },
            "end": {
              "line": 50,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "query-options",
          "description": "Computed value.\nDatabase query options for pagination.\nUse `pageLimit` to set pagination limit.",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 8
            },
            "end": {
              "line": 61,
              "column": 9
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "data-unavailable",
          "description": "Computed value. True if query ended and there's no results.",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 68,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "is-search",
          "description": "When set this component is in search mode.\nThis means that the list won't be loaded automatically and\nsome operations not related to search are disabled.",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 8
            },
            "end": {
              "line": 77,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "search-list-empty",
          "description": "Computed value. True when the query has been performed and no items\nhas been returned. It is different from `listHidden` where less\nconditions has to be checked. It is set to true when it doesn't\nhave items, is not loading and is search.",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 8
            },
            "end": {
              "line": 87,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "no-auto",
          "description": "When set it won't query for data automatically when attached to the DOM.",
          "sourceRange": {
            "start": {
              "line": 91,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 23
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "request-list",
          "description": "Dispatched when the element requests next page of results.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "request-query",
          "description": "Dispatched when search was requested.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
